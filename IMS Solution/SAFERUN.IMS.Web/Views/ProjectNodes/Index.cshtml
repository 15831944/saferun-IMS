@model IEnumerable<SAFERUN.IMS.Web.Models.ProjectNode>




@{
    ViewBag.Title = "项目评审节点";
}


<div class="row">
    <div class="col-lg-12">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
             
                <div class="ibox-tools">
                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                    <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                        <i class="fa fa-wrench"></i>
                    </a>
                    <ul class="dropdown-menu dropdown-user">
                        <li>
                            <a href="table_data_tables.html#">Config option 1</a>
                        </li>
                        <li>
                            <a href="table_data_tables.html#">Config option 2</a>
                        </li>
                    </ul>
                    <a class="close-link">
                        <i class="fa fa-times"></i>
                    </a>
                </div>
            </div>
            <div class="ibox-content">

                <div class="table-responsive">


                    <table id="projectnodes_datagrid" class="easyui-datagrid" title="项目评审节点 " style="width:auto;height:auto"
                           data-options="
                 rownumbers:true,

                remoteFilter: true,
                singleSelect: true,
                toolbar: '#projectnodes_toolbar',
                url: '/ProjectNodes/GetData',
                method: 'get',
                onClickCell: onClickCell,
                pagination: 'true'
                   ">
                        <thead>
                            <tr>
                                @*<th data-options="field:'ck',checkbox:true"></th>*@
                                <th data-options="field:'Id',width:80">@Html.DisplayNameFor(model => model.Id)</th>

                                <th data-options="field:'Name',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.Name)</th>


                                <th data-options="field:'Order',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}}">@Html.DisplayNameFor(model => model.Order)</th>


                                <th data-options="field:'ElapsedDay',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}}">@Html.DisplayNameFor(model => model.ElapsedDay)</th>

                                <th data-options="field:'DepartmentId',width:100,
                        formatter:function(value,row){
                            return row.DepartmentName;
                        },
                        editor:{
                            type:'combobox',
                            options:{
                                valueField:'Id',
                                textField:'Name',
                                method:'get',
                                url:'/ProjectNodes/GetDepartments',
                                required:true
                            }
                        }">@Html.DisplayNameFor(model => model.DepartmentId)</th>



                        <th data-options="field:'Description',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.Description)</th>

                        <th data-options="field:'ProjectTypeId',width:100,
                        formatter:function(value,row){
                            return row.ProjectTypeTypeName;
                        },
                        editor:{
                            type:'combobox',
                            options:{
                                valueField:'Id',
                                textField:'TypeName',
                                method:'get',
                                url:'/ProjectNodes/GetProjectTypes',
                                required:true
                            }
                        }">@Html.DisplayNameFor(model => model.ProjectTypeId)</th>



                    </tr>
                </thead>


                </table>
            <div id="projectnodes_toolbar" style="height:auto">
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-plus',plain:true" onclick="append()">新增</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-remove',plain:true" onclick="removeit()">删除</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="accept()">保存</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="reject()">取消</a>
                @*<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-search',plain:true" onclick="getChanges()">GetChanges</a>*@
            </div>
        </div>

    </div>
</div>
</div>
</div>
@section Scripts {
    <script type="text/javascript">
        var $dg = $('#projectnodes_datagrid');
        var editIndex = undefined;
        function endEditing() {
            if (editIndex == undefined) { return true }
            if ($dg.datagrid('validateRow', editIndex)) {

                var ed = $dg.datagrid('getEditor', { index: editIndex, field: 'DepartmentId' });
                var departmentname = $(ed.target).combobox('getText');
                var departmentid = $(ed.target).combobox('getValue');
        
                $dg.datagrid('getRows')[editIndex]['DepartmentName'] = departmentname;
                $dg.datagrid('getRows')[editIndex]['DepartmentId'] = departmentid;

             

                var ed = $dg.datagrid('getEditor', { index: editIndex, field: 'ProjectTypeId' });
                var projecttypetypename = $(ed.target).combobox('getText');
                var projecttypeid = $(ed.target).combobox('getValue');
                //console.log(categoryname, categoryid);
                //console.log(1,$dg.datagrid('getRows')[editIndex]);
                $dg.datagrid('getRows')[editIndex]['ProjectTypeTypeName'] = projecttypetypename;
                $dg.datagrid('getRows')[editIndex]['ProjectTypeId'] = projecttypeid;

                //console.log(2,$dg.datagrid('getRows')[editIndex]);

                $dg.datagrid('endEdit', editIndex);
                editIndex = undefined;


                return true;
            } else {
                return false;
            }
        }
        function onClickCell(index, field) {
            if (editIndex != index) {
                if (endEditing()) {
                    $dg.datagrid('selectRow', index)
                            .datagrid('beginEdit', index);
                    var ed = $dg.datagrid('getEditor', { index: index, field: field });
                    if (ed) {
                        ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                    }
                    editIndex = index;
                } else {
                    $dg.datagrid('selectRow', editIndex);
                }
            }
        }
        function append() {
            if (endEditing()) {
                $dg.datagrid('appendRow', { status: 'P' });
                editIndex = $dg.datagrid('getRows').length - 1;
                $dg.datagrid('selectRow', editIndex)
                        .datagrid('beginEdit', editIndex);
            }
        }
        function removeit() {
            if (editIndex == undefined) { return }
            $dg.datagrid('cancelEdit', editIndex)
                    .datagrid('deleteRow', editIndex);
            editIndex = undefined;
        }
        function accept() {
            if (endEditing()) {
                if ($dg.datagrid('getChanges').length) {
                    var inserted = $dg.datagrid('getChanges', "inserted");
                    var deleted = $dg.datagrid('getChanges', "deleted");
                    var updated = $dg.datagrid('getChanges', "updated");
                    var effectRow = new Object();
                    if (inserted.length) {
                        effectRow.inserted = inserted;
                    }
                    if (deleted.length) {
                        effectRow.deleted = deleted;
                    }
                    if (updated.length) {
                        effectRow.updated = updated;
                    }
                    console.log(JSON.stringify(effectRow));
                    $.post("/ProjectNodes/SaveData", effectRow, function (response) {
                        console.log(response);
                        if (response.Success) {
                            $.messager.alert("提示", "提交成功！");
                            $dg.datagrid('acceptChanges');
                        }
                    }, "JSON").error(function () {
                        $.messager.alert("错误", "提交错误了！", 'error');
                        $dg.datagrid('reload');
                    });

                }

                $dg.datagrid('acceptChanges');
            }
        }
        function reject() {
            $dg.datagrid('rejectChanges');
            editIndex = undefined;
        }
        function getChanges() {
            var rows = $dg.datagrid('getChanges');
            alert(rows.length + ' rows are changed!');
        }


        $(function () {

            $dg.datagrid('enableFilter', [
                {
                    field: 'DepartmentId',
                    type: 'combobox',
                    options: {
                        valueField: 'Id',
                        textField: 'Name',
                        method: 'get',
                        url: '/ProjectNodes/GetDepartments',

                        onChange: function (value) {
                            if (value == '') {
                                $dg.datagrid('removeFilterRule', 'DepartmentId');
                            } else {
                                $dg.datagrid('addFilterRule', {
                                    field: 'DepartmentId',
                                    op: 'equal',
                                    value: value
                                });
                            }
                            $dg.datagrid('doFilter');
                        }
                    }
                }
                ,
                {
                    field: 'ProjectTypeId',
                    type: 'combobox',
                    options: {
                        valueField: 'Id',
                        textField: 'TypeName',
                        method: 'get',
                        url: '/ProjectNodes/GetProjectTypes',

                        onChange: function (value) {
                            if (value == '') {
                                $dg.datagrid('removeFilterRule', 'ProjectTypeId');
                            } else {
                                $dg.datagrid('addFilterRule', {
                                    field: 'ProjectTypeId',
                                    op: 'equal',
                                    value: value
                                });
                            }
                            $dg.datagrid('doFilter');
                        }
                    }
                }

            ]);
        })
    </script>
}

