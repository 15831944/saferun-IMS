﻿


@model SAFERUN.IMS.Web.Models.ProductionSchedule


 @*@Html.HiddenFor(model => model.Id)*@



    <div class="row">
         

        			        <div class="form-group col-lg-3 col-md-3 col-sm-3">
						 @Html.LabelFor(model => model.ScheduleNo,   htmlAttributes: new { @class = "control-label " })
            
                                @Html.EditorFor(model => model.ScheduleNo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ScheduleNo,"" , new { @class = "text-danger" })
            
			        </div>
     					<div class="form-group col-lg-3 col-md-3 col-sm-3">
		    		 
				@Html.LabelFor(model => model.WorkId,   htmlAttributes: new { @class = "control-label" })
                @Html.DropDownListFor(model => model.WorkId, ViewBag.WorkId as List<SelectListItem>,"---Select---", htmlAttributes: new { @class = "form-control" }) 
                @Html.ValidationMessageFor(model => model.WorkId,"" , new { @class = "text-danger" })
           
			        </div>
      			        <div class="form-group col-lg-3 col-md-3 col-sm-3">
						 @Html.LabelFor(model => model.OrderKey,   htmlAttributes: new { @class = "control-label " })
            
                                @Html.EditorFor(model => model.OrderKey, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.OrderKey,"" , new { @class = "text-danger" })
            
			        </div>
     			        <div class="form-group col-lg-3 col-md-3 col-sm-3">
						 @Html.LabelFor(model => model.OrderDate,   htmlAttributes: new { @class = "control-label " })
            
                                @Html.EditorFor(model => model.OrderDate, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.OrderDate,"" , new { @class = "text-danger" })
            
			        </div>
     			        <div class="form-group col-lg-3 col-md-3 col-sm-3">
						 @Html.LabelFor(model => model.BeginDate,   htmlAttributes: new { @class = "control-label " })
            
                                @Html.EditorFor(model => model.BeginDate, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.BeginDate,"" , new { @class = "text-danger" })
            
			        </div>
     			        <div class="form-group col-lg-3 col-md-3 col-sm-3">
						 @Html.LabelFor(model => model.CompletedDate,   htmlAttributes: new { @class = "control-label " })
            
                                @Html.EditorFor(model => model.CompletedDate, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.CompletedDate,"" , new { @class = "text-danger" })
            
			        </div>
     			        <div class="form-group col-lg-3 col-md-3 col-sm-3">
						 @Html.LabelFor(model => model.Ower,   htmlAttributes: new { @class = "control-label " })
            
                                @Html.EditorFor(model => model.Ower, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Ower,"" , new { @class = "text-danger" })
            
			        </div>
     			        <div class="form-group col-lg-3 col-md-3 col-sm-3">
						 @Html.LabelFor(model => model.ScheduleDate,   htmlAttributes: new { @class = "control-label " })
            
                                @Html.EditorFor(model => model.ScheduleDate, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ScheduleDate,"" , new { @class = "text-danger" })
            
			        </div>
     			        <div class="form-group col-lg-3 col-md-3 col-sm-3">
						 @Html.LabelFor(model => model.Remark,   htmlAttributes: new { @class = "control-label " })
            
                                @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Remark,"" , new { @class = "text-danger" })
            
			        </div>
      
    </div>
 				 
		<!-- output all Scaffold = false Hiden field -->
					@Html.HiddenFor(model => model.CustomerId)
					@Html.HiddenFor(model => model.CreatedUserId)
					@Html.HiddenFor(model => model.CreatedDateTime)
					@Html.HiddenFor(model => model.LastEditUserId)
					@Html.HiddenFor(model => model.LastEditDateTime)
				<!--end output all Scaffold = false Hiden field -->
		   

 


     <!-- details tabs -->
    <div class="tabs-container">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs">
								<li class="active"><a data-toggle="tab" href="#tab-scheduledetails"> ScheduleDetails</a></li>
								        
			 
   
		 </ul>
		 <!-- Tab panes -->
         <div class="tab-content">
		  		  <div id="tab-scheduledetails" class="tab-pane active">

            <div class="panel-body">

                <div class="table-responsive">
				<table id="scheduledetails_datagrid" class="easyui-datagrid" title="ScheduleDetails DataGrid" style="width:auto;height:400px"
                       data-options="
                            rownumbers:true,
                            iconCls: 'fa fa-list',
                            remoteFilter: false,
                            singleSelect: true,
                            toolbar: '#scheduledetails_toolbar',
                            method: 'get',
                            onClickCell: scheduledetails_onClickCell,
                            pagination: 'true'
                    " >
                    <thead>
                        <tr>
						@*<th data-options="field:'ck',checkbox:true"></th>*@
				        
														<th data-options="field:'Id',width:80"> Id </th>
											
						
															<th data-options="field:'ScheduleNo',width:140,editor:{type:'textbox',options:{required:false} } "> ScheduleNo</th>
							
											
						
															<th data-options="field:'WorkNo',width:140,editor:{type:'textbox',options:{required:false} } "> WorkNo</th>
							
											
														<th data-options="field:'ParentSKUId',width:100,
												formatter:function(value,row){
													return row.ParentSKUSku;
												},
												editor:{
													type:'combobox',
													options:{
														valueField:'Id',
														textField:'Sku',
														method:'get',
														url:'/ProductionSchedules/GetSKUs',
														required:false
														}
												}"> ParentSKUId </th>

           
											
														<th data-options="field:'ComponentSKUId',width:100,
												formatter:function(value,row){
													return row.ComponentSKUSku;
												},
												editor:{
													type:'combobox',
													options:{
														valueField:'Id',
														textField:'Sku',
														method:'get',
														url:'/ProductionSchedules/GetSKUs',
														required:false
														}
												}"> ComponentSKUId </th>

           
											
						
															<th data-options="field:'GraphSKU',width:140,editor:{type:'textbox',options:{required:false} } "> GraphSKU</th>
							
											
						
															<th data-options="field:'GraphVer',width:140,editor:{type:'textbox',options:{required:false} } "> GraphVer</th>
							
											
						
																<th data-options="field:'ConsumeQty',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}} ,sortable:true,resizable:true ">@Html.DisplayNameFor(model => model.ConsumeQty)</th>
							
											
						
																<th data-options="field:'StockQty',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}} ,sortable:true,resizable:true ">@Html.DisplayNameFor(model => model.StockQty)</th>
							
											
						
																<th data-options="field:'RequirementQty',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}} ,sortable:true,resizable:true ">@Html.DisplayNameFor(model => model.RequirementQty)</th>
							
											
						
																<th data-options="field:'ScheduleProductionQty',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}} ,sortable:true,resizable:true ">@Html.DisplayNameFor(model => model.ScheduleProductionQty)</th>
							
											
						
																<th data-options="field:'ActualProductionQty',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}} ,sortable:true,resizable:true ">@Html.DisplayNameFor(model => model.ActualProductionQty)</th>
							
											
														<th data-options="field:'StationId',width:100,
												formatter:function(value,row){
													return row.StationStationNo;
												},
												editor:{
													type:'combobox',
													options:{
														valueField:'Id',
														textField:'StationNo',
														method:'get',
														url:'/ProductionSchedules/GetStations',
														required:false
														}
												}"> StationId </th>

           
											
														<th data-options="field:'ShiftId',width:100,
												formatter:function(value,row){
													return row.ShiftName;
												},
												editor:{
													type:'combobox',
													options:{
														valueField:'Id',
														textField:'Name',
														method:'get',
														url:'/ProductionSchedules/GetShifts',
														required:false
														}
												}"> ShiftId </th>

           
											
						
															<th data-options="field:'Operator',width:140,editor:{type:'textbox',options:{required:false} } "> Operator</th>
							
											
						
															<th data-options="field:'AltProdctionDate1',width:160,align:'right',editor:{type:'datebox',options:{required:true}} ,formatter:dateformatter"> AltProdctionDate1</th>
							
											
						
															<th data-options="field:'ActualProdctionDate1',width:160,align:'right',editor:{type:'datebox',options:{required:true}} ,formatter:dateformatter"> ActualProdctionDate1</th>
							
											
						
															<th data-options="field:'AltProdctionDate2',width:160,align:'right',editor:{type:'datebox',options:{required:true}} ,formatter:dateformatter"> AltProdctionDate2</th>
							
											
						
															<th data-options="field:'ActualProdctionDate2',width:160,align:'right',editor:{type:'datebox',options:{required:true}} ,formatter:dateformatter"> ActualProdctionDate2</th>
							
											
						
															<th data-options="field:'AltProdctionDate3',width:160,align:'right',editor:{type:'datebox',options:{required:true}} ,formatter:dateformatter"> AltProdctionDate3</th>
							
											
						
															<th data-options="field:'ActualProdctionDate3',width:160,align:'right',editor:{type:'datebox',options:{required:true}} ,formatter:dateformatter"> ActualProdctionDate3</th>
							
											
						
																<th data-options="field:'AltConsumeTime',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}} ,sortable:true,resizable:true ">@Html.DisplayNameFor(model => model.AltConsumeTime)</th>
							
											
						
																<th data-options="field:'ActualConsumeTime',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}} ,sortable:true,resizable:true ">@Html.DisplayNameFor(model => model.ActualConsumeTime)</th>
							
											
						
															<th data-options="field:'Remark1',width:140,editor:{type:'textbox',options:{required:false} } "> Remark1</th>
							
											
						
															<th data-options="field:'Remark2',width:140,editor:{type:'textbox',options:{required:false} } "> Remark2</th>
							
											
														<th data-options="field:'ProductionScheduleId',width:100,
												formatter:function(value,row){
													return row.ProductionScheduleScheduleNo;
												},
												editor:{
													type:'combobox',
													options:{
														valueField:'Id',
														textField:'ScheduleNo',
														method:'get',
														url:'/ProductionSchedules/GetProductionSchedules',
														required:false
														}
												}"> ProductionScheduleId </th>

           
											                           
                        </tr>
                    </thead>
                </table>

				<div id="scheduledetails_toolbar" style="height:auto">
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-add',plain:true" onclick="scheduledetails_append()">Append</a>
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-remove',plain:true" onclick="scheduledetails_removeit()">Remove</a>
                    @*<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="scheduledetails_accept()">Accept</a>*@
                    <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="scheduledetails_reject()">Reject</a>
                    @*<a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-search',plain:true" onclick="scheduledetails_getChanges()">GetChanges</a>*@
                </div>

                </div>
            </div>

		  	</div>
	</div>
	</div>
<!--end details tabs -->
 

 <script type="text/javascript">
	
	    
	var scheduledetailseditIndex = undefined;
    function scheduledetails_endEditing() {
        if ( scheduledetailseditIndex == undefined) { return true }
        if ($scheduledetailsdatagrid.datagrid('validateRow', scheduledetailseditIndex)) {
			            var ed = $scheduledetailsdatagrid.datagrid('getEditor', { index: scheduledetailseditIndex, field: 'SKUId' });
            var SKUSku = $(ed.target).combobox('getText');
            var SKUId = $(ed.target).combobox('getValue');
          
            $scheduledetailsdatagrid.datagrid('getRows')[scheduledetailseditIndex]['SKUSku'] = SKUSku;
            $scheduledetailsdatagrid.datagrid('getRows')[scheduledetailseditIndex]['SKUId'] = SKUId;
            
            
			            var ed = $scheduledetailsdatagrid.datagrid('getEditor', { index: scheduledetailseditIndex, field: 'SKUId' });
            var SKUSku = $(ed.target).combobox('getText');
            var SKUId = $(ed.target).combobox('getValue');
          
            $scheduledetailsdatagrid.datagrid('getRows')[scheduledetailseditIndex]['SKUSku'] = SKUSku;
            $scheduledetailsdatagrid.datagrid('getRows')[scheduledetailseditIndex]['SKUId'] = SKUId;
            
            
			            var ed = $scheduledetailsdatagrid.datagrid('getEditor', { index: scheduledetailseditIndex, field: 'ProductionScheduleId' });
            var ProductionScheduleScheduleNo = $(ed.target).combobox('getText');
            var ProductionScheduleId = $(ed.target).combobox('getValue');
          
            $scheduledetailsdatagrid.datagrid('getRows')[scheduledetailseditIndex]['ProductionScheduleScheduleNo'] = ProductionScheduleScheduleNo;
            $scheduledetailsdatagrid.datagrid('getRows')[scheduledetailseditIndex]['ProductionScheduleId'] = ProductionScheduleId;
            
            
			            var ed = $scheduledetailsdatagrid.datagrid('getEditor', { index: scheduledetailseditIndex, field: 'ShiftId' });
            var ShiftName = $(ed.target).combobox('getText');
            var ShiftId = $(ed.target).combobox('getValue');
          
            $scheduledetailsdatagrid.datagrid('getRows')[scheduledetailseditIndex]['ShiftName'] = ShiftName;
            $scheduledetailsdatagrid.datagrid('getRows')[scheduledetailseditIndex]['ShiftId'] = ShiftId;
            
            
			            var ed = $scheduledetailsdatagrid.datagrid('getEditor', { index: scheduledetailseditIndex, field: 'StationId' });
            var StationStationNo = $(ed.target).combobox('getText');
            var StationId = $(ed.target).combobox('getValue');
          
            $scheduledetailsdatagrid.datagrid('getRows')[scheduledetailseditIndex]['StationStationNo'] = StationStationNo;
            $scheduledetailsdatagrid.datagrid('getRows')[scheduledetailseditIndex]['StationId'] = StationId;
            
            
						$scheduledetailsdatagrid.datagrid('endEdit', scheduledetailseditIndex);
            scheduledetailseditIndex = undefined;


            return true;
        } else {
            return false;
        }
    }
    function scheduledetails_onClickCell(index, field) {
        if (scheduledetailseditIndex != index) {
            if (scheduledetails_endEditing()) {
                $scheduledetailsdatagrid.datagrid('selectRow', index)
                        .datagrid('beginEdit', index);
                var ed = $scheduledetailsdatagrid.datagrid('getEditor', { index: index, field: field });
                if (ed) {
                    ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                }
                scheduledetailseditIndex  = index;
            } else {
                $scheduledetailsdatagrid.datagrid('selectRow', scheduledetailseditIndex);
            }
        }
    }
    function scheduledetails_append() {
        if (scheduledetails_endEditing()) {
            $scheduledetailsdatagrid.datagrid('appendRow', { Status:0   });
            scheduledetailseditIndex = $scheduledetailsdatagrid.datagrid('getRows').length - 1;
            $scheduledetailsdatagrid.datagrid('selectRow', scheduledetailseditIndex )
                    .datagrid('beginEdit', scheduledetailseditIndex);
        }
    }
    function scheduledetails_removeit() {
        if (scheduledetailseditIndex  == undefined) { return }
        $scheduledetailsdatagrid.datagrid('cancelEdit', scheduledetailseditIndex )
                .datagrid('deleteRow', scheduledetailseditIndex );
        scheduledetailseditIndex = undefined;
    }
   
    function scheduledetails_reject() {
        $scheduledetailsdatagrid.datagrid('rejectChanges');
        scheduledetailseditIndex  = undefined;
    }
    function scheduledetails_getChanges() {
        var rows = $scheduledetailsdatagrid.datagrid('getChanges');
        alert(rows.length + ' rows are changed!');
    }


	  
	$(function () {
	
		$.get('/ProductionSchedules/GetScheduleDetailsByProductionScheduleId/' + @Model.Id,function(data){
            //console.log(data);
            $scheduledetailsdatagrid.datagrid('loadData',data);
        
        })


	
	});
</script>



