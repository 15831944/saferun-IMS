


@model IEnumerable<SAFERUN.IMS.Web.Models.PurchasePlan>




@{
    ViewBag.Title = "订单采购计划";
}


<div class="row">
    <div class="col-lg-12">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                 
                <div class="ibox-tools">
                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                    <a class="dropdown-toggle" data-toggle="dropdown" href="#">
                        <i class="fa fa-wrench"></i>
                    </a>
                    <ul class="dropdown-menu dropdown-user">
                        <li>
                            <a href="table_data_tables.html#">Config option 1</a>
                        </li>
                        <li>
                            <a href="table_data_tables.html#">Config option 2</a>
                        </li>
                    </ul>
                    <a class="close-link">
                        <i class="fa fa-times"></i>
                    </a>
                </div>
            </div>
            <div class="ibox-content">

                <div class="table-responsive">
           
 
                    <table id="purchaseplans_datagrid" class="easyui-datagrid" title="订单采购计划 DataGrid" style="width:auto;height:auto"
                           data-options="
                 rownumbers:true,

                remoteFilter: true,
                singleSelect: true,
                toolbar: '#purchaseplans_toolbar',
                url: '/PurchasePlans/GetData',
                method: 'get',
                onClickCell: onClickCell,
                pagination: 'true'
                   ">
                        <thead>
                            <tr>
                                @*<th data-options="field:'ck',checkbox:true"></th>*@
                                <th data-options="field:'Id',width:80">@Html.DisplayNameFor(model => model.Id)</th>

                                <th data-options="field:'OrderKey',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.OrderKey)</th>

                                <th data-options="field:'SKUId',width:100,
                        formatter:function(value,row){
                            return row.SKUSku;
                        },
                        editor:{
                            type:'combobox',
                            options:{
                                valueField:'Id',
                                textField:'Sku',
                                method:'get',
                                url:'/PurchasePlans/GetSKUs',
                                required:false
                            }
                        }">@Html.DisplayNameFor(model => model.SKUId)</th>



                        <th data-options="field:'DesignName',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.DesignName)</th>


                        <th data-options="field:'ComponentSKU',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.ComponentSKU)</th>


                        <th data-options="field:'ALTSku',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.ALTSku)</th>


                        <th data-options="field:'GraphSKU',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.GraphSKU)</th>


                        <th data-options="field:'StockSKU',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.StockSKU)</th>


                        <th data-options="field:'Status',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}}">@Html.DisplayNameFor(model => model.Status)</th>


                        <th data-options="field:'ConsumeQty',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}}">@Html.DisplayNameFor(model => model.ConsumeQty)</th>


                        <th data-options="field:'RequirementQty',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}}">@Html.DisplayNameFor(model => model.RequirementQty)</th>


                        <th data-options="field:'RejectRatio',width:100,align:'right',editor:{type:'numberbox',options:{precision:0}}">@Html.DisplayNameFor(model => model.RejectRatio)</th>


                        <th data-options="field:'Deploy',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.Deploy)</th>


                        <th data-options="field:'Locator',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.Locator)</th>


                        <th data-options="field:'Brand',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.Brand)</th>


                        <th data-options="field:'Supplier',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.Supplier)</th>


                        <th data-options="field:'OrderPlanDate',width:160,align:'right',editor:{type:'datetimebox',options:{required:false}} ,formatter:dateformatter">@Html.DisplayNameFor(model => model.OrderPlanDate)</th>


                        <th data-options="field:'PlanDeliveryDate',width:160,align:'right',editor:{type:'datetimebox',options:{required:false}} ,formatter:dateformatter">@Html.DisplayNameFor(model => model.PlanDeliveryDate)</th>


                        <th data-options="field:'ActualDeliveryDate',width:160,align:'right',editor:{type:'datetimebox',options:{required:false}} ,formatter:dateformatter">@Html.DisplayNameFor(model => model.ActualDeliveryDate)</th>


                        <th data-options="field:'Remark',width:140,editor:{type:'textbox',options:{required:false} } ">@Html.DisplayNameFor(model => model.Remark)</th>

                        <th data-options="field:'OrderId',width:100,
                        formatter:function(value,row){
                            return row.OrderOrderKey;
                        },
                        editor:{
                            type:'combobox',
                            options:{
                                valueField:'Id',
                                textField:'OrderKey',
                                method:'get',
                                url:'/PurchasePlans/GetOrders',
                                required:false
                            }
                        }">@Html.DisplayNameFor(model => model.OrderId)</th>



                    </tr>
                </thead>


                </table>
	<div id="purchaseplans_toolbar" style="height:auto">
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-add',plain:true" onclick="append()">Append</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-remove',plain:true" onclick="removeit()">Remove</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-save',plain:true" onclick="accept()">Accept</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-undo',plain:true" onclick="reject()">Reject</a>
                <a href="javascript:void(0)" class="easyui-linkbutton" data-options="iconCls:'icon-search',plain:true" onclick="getChanges()">GetChanges</a>
            </div>
				</div>

            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script type="text/javascript">
         var $dg = $('#purchaseplans_datagrid');
		 var editIndex = undefined;
        function endEditing() {
            if (editIndex == undefined) { return true }
            if ($dg.datagrid('validateRow', editIndex)) {

				                var ed = $dg.datagrid('getEditor', { index: editIndex, field: 'OrderId' });
                var orderorderkey = $(ed.target).combobox('getText');
                var orderid = $(ed.target).combobox('getValue');
               
                $dg.datagrid('getRows')[editIndex]['OrderOrderKey'] =  orderorderkey;
                $dg.datagrid('getRows')[editIndex]['OrderId'] = orderid;
 

				                var ed = $dg.datagrid('getEditor', { index: editIndex, field: 'SKUId' });
                var skusku = $(ed.target).combobox('getText');
                var skuid = $(ed.target).combobox('getValue');
               
                $dg.datagrid('getRows')[editIndex]['SKUSku'] =  skusku;
                $dg.datagrid('getRows')[editIndex]['SKUId'] = skuid;
 

								$dg.datagrid('endEdit', editIndex);
                editIndex = undefined;

                
                return true;
            } else {
                return false;
            }
        }
        function onClickCell(index, field) {
            if (editIndex != index) {
                if (endEditing()) {
                    $dg.datagrid('selectRow', index)
                            .datagrid('beginEdit', index);
                    var ed = $dg.datagrid('getEditor', { index: index, field: field });
                    if (ed) {
                        ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                    }
                    editIndex = index;
                } else {
                    $dg.datagrid('selectRow', editIndex);
                }
            }
        }
        function append() {
            if (endEditing()) {
                $dg.datagrid('appendRow', { status: 'P' });
                editIndex = $dg.datagrid('getRows').length - 1;
                $dg.datagrid('selectRow', editIndex)
                        .datagrid('beginEdit', editIndex);
            }
        }
        function removeit() {
            if (editIndex == undefined) { return }
            $dg.datagrid('cancelEdit', editIndex)
                    .datagrid('deleteRow', editIndex);
            editIndex = undefined;
        }
        function accept() {
            if (endEditing()) {
                if ($dg.datagrid('getChanges').length) {
                    var inserted = $dg.datagrid('getChanges', "inserted");
                    var deleted = $dg.datagrid('getChanges', "deleted");
                    var updated = $dg.datagrid('getChanges', "updated");
                    var effectRow = new Object();
                    if (inserted.length) {
                        effectRow.inserted = inserted;
                    }
                    if (deleted.length) {
                        effectRow.deleted = deleted;
                    }
                    if (updated.length) {
                        effectRow.updated = updated;
                    }
                    console.log(JSON.stringify(effectRow));
                    $.post("/PurchasePlans/SaveData", effectRow, function (rsp) {
                        console.log(rsp);
                        if (rsp.Success) {
                            $.messager.alert("提示", "提交成功！");
                            $dg.datagrid('acceptChanges');
                        }
                    }, "JSON").error(function () {
                        $.messager.alert("错误", "提交错误了！",'error');
                      
                    });
              
                }

                $dg.datagrid('acceptChanges');
            }
        }
        function reject() {
            $dg.datagrid('rejectChanges');
            editIndex = undefined;
        }
        function getChanges() {
            var rows = $dg.datagrid('getChanges');
            alert(rows.length + ' rows are changed!');
        }


		 $(function () {
		  
           $dg.datagrid('enableFilter',[
		   				{
                      field: 'OrderPlanDate',
                      type: 'datebox',
                      options: {
                          onChange: function (value) {
                              if (value == '') {
                                  $dg.datagrid('removeFilterRule', 'OrderPlanDate');
                              } else {
                                  $dg.datagrid('addFilterRule', {
                                      field: 'OrderPlanDate',
                                      op: 'equal',
                                      value: value
                                  });
                              }
                              $dg.datagrid('doFilter');
                          }
                      }
                  },
		   				{
                      field: 'PlanDeliveryDate',
                      type: 'datebox',
                      options: {
                          onChange: function (value) {
                              if (value == '') {
                                  $dg.datagrid('removeFilterRule', 'PlanDeliveryDate');
                              } else {
                                  $dg.datagrid('addFilterRule', {
                                      field: 'PlanDeliveryDate',
                                      op: 'equal',
                                      value: value
                                  });
                              }
                              $dg.datagrid('doFilter');
                          }
                      }
                  },
		   				{
                      field: 'ActualDeliveryDate',
                      type: 'datebox',
                      options: {
                          onChange: function (value) {
                              if (value == '') {
                                  $dg.datagrid('removeFilterRule', 'ActualDeliveryDate');
                              } else {
                                  $dg.datagrid('addFilterRule', {
                                      field: 'ActualDeliveryDate',
                                      op: 'equal',
                                      value: value
                                  });
                              }
                              $dg.datagrid('doFilter');
                          }
                      }
                  },
		   		   
		   		   {
				 field: 'SKUId',
				 type:'combobox',
                 options:{
                                valueField:'Id',
                                textField:'Sku',
                                method:'get',
                                url:'/PurchasePlans/GetSKUs',
								onChange: function (value) {
								if (value == '') {
									$dg.datagrid('removeFilterRule', 'SKUId');
								} else {
									$dg.datagrid('addFilterRule', {
										field: 'SKUId',
									    op: 'equal',
										value: value
                                });
                            }
                            $dg.datagrid('doFilter');
                        }
					}
		   },
		   		   {
				 field: 'OrderId',
				 type:'combobox',
                 options:{
                                valueField:'Id',
                                textField:'OrderKey',
                                method:'get',
                                url:'/PurchasePlans/GetOrders',
								onChange: function (value) {
								if (value == '') {
									$dg.datagrid('removeFilterRule', 'OrderId');
								} else {
									$dg.datagrid('addFilterRule', {
										field: 'OrderId',
									    op: 'equal',
										value: value
                                });
                            }
                            $dg.datagrid('doFilter');
                        }
					}
		   },
		   		   
		   ]);
        })
     </script>
}

